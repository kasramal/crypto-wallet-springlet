package com.demohouse.walletcore.core.transactions.coins.tezos;

import com.demohouse.walletcore.utils.Base58Utils;
import com.demohouse.walletcore.utils.WalletByteUtils;
import com.demohouse.walletcore.utils.WalletCheckSumUtils;
import com.demohouse.walletcore.utils.WalletHexUtils;
import org.bouncycastle.crypto.params.Ed25519PrivateKeyParameters;
import org.bouncycastle.crypto.signers.Ed25519Signer;
import org.bouncycastle.util.encoders.Hex;

import java.security.MessageDigest;

public class TezosTransaction {

    /**
     * This method concatenate transactionHex with an specific prefix
     * Sample:
     * input: 528dac75c97e056df84721d6920be606456c9cbe237a84fb3719b77bab7138ca6b0091823476fe6577077356c2a9671b33533c78fd4800dad7bb02904e000014fd31b989914fbe1f3c922b3653cc0a39b6cd61779ff50548534b8392a6b1fe
     * return: [43, -69, -47, -91, -53, 127, 61, 6, -7, 55, -11, -26, -110, 34, -78, 4, -65, 23, -95, -55, -114, 11, -87, -58, 113, 102, -119, 70, -107, -67, 24, -111]
     *
     * @param transactionHex get from api when forge operation
     * @return hashBytes that use for sign operation with privateKey
     */
    public static byte[] concatenateSerializedTransaction(String transactionHex) {
        byte[] decoded = WalletHexUtils.decodeHexString(transactionHex);
        byte[] withPrefix = WalletByteUtils.concatenate(TezosUtils.Prefix.SERIALIZE, decoded);
        return hash32Bytes(withPrefix);
    }

    /**
     * This method sign your transaction with an specific privateKey
     * Sample
     * input:
     * concatenateSerializedTransaction: [43, -69, -47, -91, -53, 127, 61, 6, -7, 55, -11, -26, -110, 34, -78, 4, -65, 23, -95, -55, -114, 11, -87, -58, 113, 102, -119, 70, -107, -67, 24, -111]
     * privateKey: beda7850e047e5a900416e23e2ded405d92595f43c347c481ceac105a33094ea14fd31b989914fbe1f3c922b3653cc0a39b6cd61779ff50548534b8392a6b1fe
     * return: [-115, 7, 27, -102, 108, 84, 92, 29, -19, 30, -57, -120, 0, 122, -14, -56, -81, -60, -42, 117, 48, -108, -14, 10, -20, 125, -38, 105, -78, 25, -23, -73, -27, -126, 107, 27, -124, -6, 116, -10, 38, -21, 62, 55, 111, 30, -2, 31, 85, 109, -120, 106, 94, 12, -51, -86, -33, -125, 88, 114, 40, -105, -6, 11]
     *
     * @param message that generated by TezosTransaction.concatenateSerializedTransaction()
     * @return signature that is equivalent to sig in kukai-wallet
     */
    public static byte[] signTransaction(byte[] message, String privateKeyHex) {
        byte[] privateKeyBytes = Hex.decode(privateKeyHex);
        Ed25519PrivateKeyParameters privateKey = new Ed25519PrivateKeyParameters(privateKeyBytes, 0);
        Ed25519Signer signer = new Ed25519Signer();
        signer.init(true, privateKey);
        signer.update(message, 0, message.length);
        return signer.generateSignature();
    }

    /**
     * This method generate custom hex of your signature
     * Sample
     * input: [-115, 7, 27, -102, 108, 84, 92, 29, -19, 30, -57, -120, 0, 122, -14, -56, -81, -60, -42, 117, 48, -108, -14, 10, -20, 125, -38, 105, -78, 25, -23, -73, -27, -126, 107, 27, -124, -6, 116, -10, 38, -21, 62, 55, 111, 30, -2, 31, 85, 109, -120, 106, 94, 12, -51, -86, -33, -125, 88, 114, 40, -105, -6, 11]
     * return: edsigtrFtUvrqtzFEecVubsiB7ZesNsxH29WWH3bFdYvHi5ubDzJcHzd2p6k6TY2CWparSy1ewxVAdPzG8zzzoNmXaCP3i4f4HA
     *
     * @param signature that generated by TezosTransaction.signTransaction
     * @return hex string of your signature with an specific prefix and it's equivalent to edSig in kukai-wallet
     */
    public static String generateEdSignature(byte[] signature) {
        byte[] edSigBytes = WalletByteUtils.concatenate(TezosUtils.Prefix.ED_SIG, signature);
        byte[] checksum = WalletCheckSumUtils.doubleSha256(edSigBytes);
        return Base58Utils.encode(edSigBytes, checksum);
    }

    /**
     * Sample
     * input:
     * transactionHex: 528dac75c97e056df84721d6920be606456c9cbe237a84fb3719b77bab7138ca6b0091823476fe6577077356c2a9671b33533c78fd4800dad7bb02904e000014fd31b989914fbe1f3c922b3653cc0a39b6cd61779ff50548534b8392a6b1fe
     * signature: [-115, 7, 27, -102, 108, 84, 92, 29, -19, 30, -57, -120, 0, 122, -14, -56, -81, -60, -42, 117, 48, -108, -14, 10, -20, 125, -38, 105, -78, 25, -23, -73, -27, -126, 107, 27, -124, -6, 116, -10, 38, -21, 62, 55, 111, 30, -2, 31, 85, 109, -120, 106, 94, 12, -51, -86, -33, -125, 88, 114, 40, -105, -6, 11]
     * return: 528dac75c97e056df84721d6920be606456c9cbe237a84fb3719b77bab7138ca6b0091823476fe6577077356c2a9671b33533c78fd4800dad7bb02904e000014fd31b989914fbe1f3c922b3653cc0a39b6cd61779ff50548534b8392a6b1fe8d071b9a6c545c1ded1ec788007af2c8afc4d6753094f20aec7dda69b219e9b7e5826b1b84fa74f626eb3e376f1efe1f556d886a5e0ccdaadf8358722897fa0b
     *
     * @param transactionHex get from api when forge operation
     * @param signature      that generated by TezosTransaction.signTransaction
     * @return type is equivalent to sBytes in kukai-wallet
     */
    public static String concatenateSignatureAndSerializedTransactions(String transactionHex, byte[] signature) {
        return transactionHex + WalletHexUtils.bytesToHex(signature);
    }

    private static byte[] hash32Bytes(byte[] input) {
        try {
            MessageDigest digest = MessageDigest.getInstance("SHA-256");
            return digest.digest(input); // SHA-256 gives 32 bytes
        } catch (Exception e) {
            throw new RuntimeException("Hashing failed", e);
        }
    }
}
